package com.infy.service.test;

import java.util.ArrayList;
import java.util.List;


import org.junit.Assert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import com.infy.dto.DestinationDTO;


import com.infy.entity.Destination;
import com.infy.entity.Details;
import com.infy.entity.Itinerary;
import com.infy.exception.WanderLustException;
import com.infy.repository.PackageRepository;


import com.infy.service.PackageServiceImpl;


@SpringBootTest
public class PackageServiceTest {

	
	@Mock
	PackageRepository packageRepository;

	@InjectMocks
	PackageServiceImpl packageService;
	
	
	@Test
	public void validgetPackages() throws WanderLustException
	{
		List<Destination> dlist=new ArrayList();
		Destination dt=new Destination();
		Details d=new Details();
		Itinerary it=new Itinerary();
		d.setItinerary(it);
		dt.setDetails(d);
	
		dt.setDestinationId("D1001");
		dlist.add(dt);
		
		Mockito.when(packageRepository.findByContinent("Europe")).thenReturn(dlist);
		List<DestinationDTO> actual=packageService.getPackages("Europe");
	    Assert.assertEquals(dlist.get(0).getDestinationId(), actual.get(0).getDestinationId());
	}
	@Test
	public void invalidgetPackages() throws WanderLustException
	{
		
		List<Destination> dlist=new ArrayList();
		
		Mockito.when(packageRepository.findByContinent(Mockito.anyString())).thenReturn(dlist);

		WanderLustException exception = Assertions.assertThrows(WanderLustException.class,
				() -> packageService.getPackages("Europe"));
		Assertions.assertEquals("PackageService.CONTINENT_NOTSUPPORTED", exception.getMessage());
		
	}
	
	@Test
	public void validgetAllPackages() throws WanderLustException
	{
		List<Destination> dlist=new ArrayList();
		Destination dt=new Destination();
		Details d=new Details();
		Itinerary it=new Itinerary();
		d.setItinerary(it);
		dt.setDetails(d);
	
		dt.setDestinationId("D1001");
		dlist.add(dt);
		
		Mockito.when(packageRepository.findAll()).thenReturn(dlist);
		List<DestinationDTO> actual=packageService.getAllPackages();
	    Assert.assertEquals(dlist.get(0).getDestinationId(), actual.get(0).getDestinationId());
	}
	
	
	@Test
	public void invalidgetAllPackages() throws WanderLustException
	{
		
		List<Destination> dlist=new ArrayList();
		
		Mockito.when(packageRepository.findAll()).thenReturn(dlist);

		WanderLustException exception = Assertions.assertThrows(WanderLustException.class,
				() -> packageService.getAllPackages());
		Assertions.assertEquals("PackageService.PACKAGE_EMPTY_DATABASE", exception.getMessage());
		
	}
	
	@Test
	public void validgethotdeals() throws WanderLustException
	{
		List<Destination> dlist=new ArrayList();
		Destination dt=new Destination();
		Details d=new Details();
		Itinerary it=new Itinerary();
		d.setItinerary(it);
		dt.setDetails(d);
		dt.setDiscount(5.0f);
		dt.setDestinationId("D1001");
		
		Destination dt1=new Destination();
		Details d1=new Details();
		Itinerary it1=new Itinerary();
		d1.setItinerary(it1);
		dt1.setDetails(d1);
		dt1.setDiscount(3.0f);
		dt1.setDestinationId("D1002");
		
		
		dlist.add(dt);
		dlist.add(dt1);
		Mockito.when(packageRepository.findByDiscountGreaterThan(0.0f)).thenReturn(dlist);
		List<DestinationDTO> actual=packageService.getHotDeals();
	    Assert.assertEquals(dlist.get(0).getDestinationId(), actual.get(0).getDestinationId());
	}
	
	@Test
	public void invalidgethotdeals() throws WanderLustException
	{
		List<Destination> dlist=new ArrayList();

		
		
	
		Mockito.when(packageRepository.findByDiscountGreaterThan(0.0f)).thenReturn(dlist);
		WanderLustException exception = Assertions.assertThrows(WanderLustException.class,
				() -> packageService.getHotDeals());
		Assertions.assertEquals("PackageService.HOTDEALS_UNAVAILABLE", exception.getMessage());
	}
	
	
	@Test
	public void validgetPackageByDestination() throws WanderLustException
	{
		
		List<Destination> dlist=new ArrayList();
		Destination dt=new Destination();
		Details d=new Details();
		Itinerary it=new Itinerary();
		d.setItinerary(it);
		dt.setDetails(d);
	
		dt.setDestinationId("D1001");
		dlist.add(dt);
		
		Mockito.when(packageRepository.findByDestinationId("D1001")).thenReturn(dt);
		DestinationDTO actual=packageService.getPackageByDestination("D1001");
	    Assert.assertEquals(dt.getDestinationId(), actual.getDestinationId());
	}
	
	
	

}